{"version":3,"sources":["store.jsx","components/root/ImportTriviaButton.jsx","components/root/WelcomePage.jsx","utils/time.js","components/play/Timer.jsx","components/play/ScoreCounter.jsx","components/play/TriviaCard.jsx","components/play/GamePage.jsx","components/root/GameOverPage.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["initialState","isFetching","questions","currentQuestionIdx","score","timer","Reducer","state","action","type","payload","error","alert","message","Error","Context","createContext","StoreProvider","children","useReducer","dispatch","Provider","value","ImportTriviaButton","useContext","history","useHistory","loadTrivia","axios","get","then","response","easyQuestions","data","results","push","mediumQuestions","hardQuestions","catch","Spinner","Button","onClick","WelcomePage","id","Heading","as","color","margin","calculateMinutes","tenthsOfSecond","Math","floor","calculateSecondsRemainder","String","toFixed","padStart","Timer","stableDispatch","useCallback","useState","minute","setMinute","second","setSecond","useEffect","interval","setInterval","clearInterval","Box","rounded","borderWidth","background","padding","position","top","left","minWidth","Text","fontWeight","ScoreCounter","TriviaCard","category","question","options","checkAnswer","textAlign","width","size","decodeURIComponent","Divider","borderColor","className","variantColor","display","defaultProps","GamePage","questionObj","correct_answer","incorrect_answers","setOptions","endGame","shuffledOptions","i","length","j","random","shuffleOptions","answerGiven","document","getElementById","classList","add","setTimeout","remove","GameOverPage","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","basename","CSSReset","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.a9b7c835.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\n\nconst initialState = {\n  isFetching: false,\n  questions: [],\n  currentQuestionIdx: 0,\n  score: 0,\n  timer: 0,\n};\n\nconst Reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_TRIVIA_START':\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case 'FETCH_TRIVIA_SUCCESS':\n      return {\n        ...state,\n        isFetching: false,\n        questions: action.payload,\n      };\n    case 'FETCH_TRIVIA_FAILURE': {\n      const error = action.payload;\n      alert(`There was an error fetching trivia: ${error.message}. Please try again.`);\n      return {\n        ...state,\n        isFetching: false,\n      };\n    }\n    case 'INCREMENT_TIMER':\n      return {\n        ...state,\n        timer: state.timer + 1,\n      };\n    case 'QUESTION_CORRECT':\n      return {\n        ...state,\n        currentQuestionIdx: state.currentQuestionIdx + 1,\n        score: state.score + 1,\n      };\n    case 'QUESTION_INCORRECT':\n      return {\n        ...state,\n        currentQuestionIdx: state.currentQuestionIdx + 1,\n      };\n    default:\n      throw new Error();\n  }\n};\n\nexport const Context = createContext(initialState);\n\nexport const StoreProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      { children }\n    </Context.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Spinner } from '@chakra-ui/core';\nimport { Context } from '../../store';\n\nconst ImportTriviaButton = () => {\n  const [state, dispatch] = useContext(Context);\n  const history = useHistory();\n\n  const loadTrivia = () => {\n    dispatch({ type: 'FETCH_TRIVIA_START' });\n    const questions = [];\n\n    axios.get('https://opentdb.com/api.php?amount=10&difficulty=easy&type=multiple&encode=url3986')\n      .then((response) => {\n        const easyQuestions = response.data.results;\n        questions.push(...easyQuestions);\n        return axios.get('https://opentdb.com/api.php?amount=10&difficulty=medium&type=multiple&encode=url3986');\n      })\n      .then((response) => {\n        const mediumQuestions = response.data.results;\n        questions.push(...mediumQuestions);\n        return axios.get('https://opentdb.com/api.php?amount=10&difficulty=hard&type=multiple&encode=url3986');\n      })\n      .then((response) => {\n        const hardQuestions = response.data.results;\n        questions.push(...hardQuestions);\n\n        dispatch({\n          type: 'FETCH_TRIVIA_SUCCESS',\n          payload: questions,\n        });\n\n        history.push('/play');\n      })\n      .catch((error) => {\n        dispatch({ type: 'FETCH_TRIVIA_FAILURE', payload: error });\n      });\n  };\n\n  const clickMe = () => (\n    <Button\n      onClick={loadTrivia}\n    >\n      Click me to fetch trivia\n    </Button>\n  );\n\n  const pleaseWait = () => (\n    <Spinner>Loading trivia...</Spinner>\n  );\n\n  return (\n    <>\n      {state.isFetching ? pleaseWait() : clickMe()}\n    </>\n  );\n};\n\nexport default ImportTriviaButton;\n","import React from 'react';\nimport { Heading } from '@chakra-ui/core';\nimport ImportTriviaButton from './ImportTriviaButton';\n\nconst WelcomePage = () => (\n  <div id=\"main-window\">\n    <Heading\n      as=\"h1\"\n      color=\"white\"\n      margin=\"1rem\"\n    >\n      Welcome to Triventi!\n    </Heading>\n\n    <ImportTriviaButton />\n  </div>\n);\n\nexport default WelcomePage;\n","export const calculateMinutes = (tenthsOfSecond) => {\n  return Math.floor((tenthsOfSecond / 10) / 60);\n};\n\nexport const calculateSecondsRemainder = (tenthsOfSecond) => {\n  return String(((tenthsOfSecond / 10) % 60).toFixed(1)).padStart(4, '0');\n};\n","import React, { useContext, useState, useEffect, useCallback } from 'react';\nimport { Box, Text } from '@chakra-ui/core';\nimport { Context } from '../../store';\nimport { calculateMinutes, calculateSecondsRemainder } from '../../utils/time';\n\nconst Timer = () => {\n  const [state, dispatch] = useContext(Context);\n  const stableDispatch = useCallback(dispatch, []);\n  const { timer } = state;\n  const [minute, setMinute] = useState('0');\n  const [second, setSecond] = useState('00');\n\n  useEffect(() => {\n    // eslint-disable-next-line no-unused-vars\n    let isSubscribed = true;\n    const interval = setInterval(() => {\n      stableDispatch({ type: 'INCREMENT_TIMER' });\n\n      setMinute(calculateMinutes(timer));\n      setSecond(calculateSecondsRemainder(timer));\n    }, 100);\n\n    return () => {\n      isSubscribed = false;\n      clearInterval(interval);\n    };\n  }, [timer, stableDispatch]);\n\n  return (\n    <Box\n      rounded=\"sm\"\n      borderWidth=\"2px\"\n      background=\"white\"\n      padding=\".5rem\"\n      margin=\"1rem\"\n      position=\"absolute\"\n      top=\"1rem\"\n      left=\"93%\"\n      minWidth=\"5rem\"\n    >\n      <Text fontWeight=\"bold\">Time:</Text>\n      <Text fontWeight=\"bold\">\n        {minute}\n        :\n        {second}\n      </Text>\n    </Box>\n  );\n};\n\nexport default Timer;\n","import React, { useContext } from 'react';\nimport { Box, Text } from '@chakra-ui/core';\nimport { Context } from '../../store';\n\nconst ScoreCounter = () => {\n  const [state] = useContext(Context);\n\n  return (\n    <Box\n      rounded=\"sm\"\n      borderWidth=\"2px\"\n      background=\"white\"\n      padding=\".5rem\"\n      margin=\"1rem\"\n      position=\"absolute\"\n      top=\"1rem\"\n      left=\"1%\"\n      minWidth=\"5rem\"\n    >\n      <Text fontWeight=\"bold\">Score:</Text>\n      <Text fontWeight=\"bold\">\n        {state.score}\n      </Text>\n    </Box>\n  );\n};\n\nexport default ScoreCounter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, Button, Heading, Divider, Text,\n} from '@chakra-ui/core';\n\nconst TriviaCard = ({\n  category, question, options, checkAnswer,\n}) => (\n  <Box\n    rounded=\"lg\"\n    textAlign=\"center\"\n    borderWidth=\"2px\"\n    background=\"white\"\n    padding=\"2rem\"\n    width=\"85vw\"\n  >\n    <Heading as=\"h2\" size=\"xl\">{decodeURIComponent(category)}</Heading>\n    <Divider borderColor=\"black.600\" />\n    <Heading as=\"h3\" size=\"lg\">{decodeURIComponent(question)}</Heading>\n    <div className=\"buttons\">\n      <Button\n        variantColor=\"blue\"\n        display=\"block\"\n        margin=\"1rem auto\"\n        onClick={() => checkAnswer(options[0])}\n      >\n        <Text>{decodeURIComponent(options[0])}</Text>\n      </Button>\n      <Button\n        variantColor=\"yellow\"\n        display=\"block\"\n        margin=\"1rem auto\"\n        onClick={() => checkAnswer(options[1])}\n      >\n        <Text>{decodeURIComponent(options[1])}</Text>\n      </Button>\n      <Button\n        variantColor=\"pink\"\n        display=\"block\"\n        margin=\"1rem auto\"\n        onClick={() => checkAnswer(options[2])}\n      >\n        <Text>{decodeURIComponent(options[2])}</Text>\n      </Button>\n      <Button\n        variantColor=\"teal\"\n        display=\"block\"\n        margin=\"1rem auto\"\n        onClick={() => checkAnswer(options[3])}\n      >\n        <Text>{decodeURIComponent(options[3])}</Text>\n      </Button>\n    </div>\n  </Box>\n);\n\nTriviaCard.defaultProps = {\n  category: '',\n  question: '',\n  options: ['', '', '', ''],\n};\nTriviaCard.propTypes = {\n  category: PropTypes.string,\n  question: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.string),\n  checkAnswer: PropTypes.func.isRequired,\n};\n\nexport default TriviaCard;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Timer from './Timer';\nimport { Context } from '../../store';\nimport ScoreCounter from './ScoreCounter';\nimport TriviaCard from './TriviaCard';\n\nconst GamePage = () => {\n  const [state, dispatch] = useContext(Context);\n  const history = useHistory();\n\n  const { currentQuestionIdx } = state;\n  const questionObj = state.questions[currentQuestionIdx] || {\n    correct_answer: null,\n    incorrect_answers: [null],\n  };\n  const { category, question } = questionObj || '';\n\n  const returnHomeIfQuestionsNotLoaded = () => {\n    if (!questionObj.correct_answer) {\n      history.push('/triventi');\n    }\n  };\n\n  useEffect(returnHomeIfQuestionsNotLoaded, []);\n\n  const [options, setOptions] = useState([]);\n\n  const shuffleOptions = () => {\n    const shuffledOptions = [questionObj.correct_answer, ...questionObj.incorrect_answers];\n\n    for (let i = shuffledOptions.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [shuffledOptions[i], shuffledOptions[j]] = [shuffledOptions[j], shuffledOptions[i]];\n    }\n\n    setOptions(shuffledOptions);\n  };\n\n  const endGame = () => {\n    history.push('/game-over');\n  };\n\n  const shuffleOptionsOrEndGame = () => {\n    if (currentQuestionIdx < 30) {\n      shuffleOptions();\n    } else {\n      endGame();\n    }\n  };\n\n  useEffect(shuffleOptionsOrEndGame, [currentQuestionIdx]);\n\n  const flashCorrect = () => {\n    document.getElementById('main-window').classList.add('flash-correct');\n\n    setTimeout(() => {\n      document.getElementById('main-window').classList.remove('flash-correct');\n    }, 300);\n  };\n\n  const flashIncorrect = () => {\n    document.getElementById('main-window').classList.add('flash-incorrect');\n\n    setTimeout(() => {\n      document.getElementById('main-window').classList.remove('flash-incorrect');\n    }, 500);\n  };\n\n  const checkAnswer = (answerGiven) => {\n    if (answerGiven === questionObj.correct_answer) {\n      flashCorrect();\n      dispatch({ type: 'QUESTION_CORRECT' });\n    } else {\n      flashIncorrect();\n      dispatch({ type: 'QUESTION_INCORRECT' });\n    }\n  };\n\n  return (\n    <div id=\"main-window\">\n      <ScoreCounter />\n      <Timer {...{ endGame }} />\n      <TriviaCard\n        {...{\n          category, question, options, checkAnswer,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GamePage;\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Heading, Text } from '@chakra-ui/core';\nimport { Context } from '../../store';\nimport { calculateMinutes, calculateSecondsRemainder } from '../../utils/time';\n\nconst GameOverPage = () => {\n  const history = useHistory();\n  const [state] = useContext(Context);\n  const { timer } = state;\n\n  const returnHomeIfQuestionsNotLoaded = () => {\n    if (state.questions.length < 1) {\n      history.push('/triventi');\n    }\n  };\n\n  useEffect(returnHomeIfQuestionsNotLoaded, []);\n\n  return (\n    <div id=\"main-window\">\n      <Heading as=\"h1\" color=\"white\">\n        Game Over\n      </Heading>\n      <Text color=\"white\">\n        {`You got ${state.score} points in a time of ${calculateMinutes(timer)}:${calculateSecondsRemainder(timer)}`}\n      </Text>\n    </div>\n  );\n};\n\nexport default GameOverPage;\n","import React from 'react';\nimport './App.scss';\nimport { Switch, Route } from 'react-router-dom';\nimport WelcomePage from './components/root/WelcomePage';\nimport GamePage from './components/play/GamePage';\nimport GameOverPage from './components/root/GameOverPage';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/triventi\" component={WelcomePage} />\n      <Route path=\"/play\" component={GamePage} />\n      <Route path=\"/game-over\" component={GameOverPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { StoreProvider } from './store';\n\nReactDOM.render(\n  <StoreProvider>\n    <ThemeProvider>\n      <BrowserRouter basename=\"/triventi\">\n        <CSSReset />\n        <App />\n      </BrowserRouter>\n    </ThemeProvider>\n  </StoreProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}